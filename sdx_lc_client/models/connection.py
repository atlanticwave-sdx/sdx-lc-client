# coding: utf-8

"""
    SDX LC

    You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).   # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: yxin@renci.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Connection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "name": "str",
        "ingress_port": "Port",
        "egress_port": "Port",
        "quantity": "int",
        "start_time": "datetime",
        "end_time": "datetime",
        "multi_path": "bool",
        "preempt": "bool",
        "backup_path_type": "str",
        "exclusive_links": "list[Link]",
        "inclusive_links": "list[Link]",
        "bandwidth_required": "float",
        "bandwidth_measured": "float",
        "latency_required": "float",
        "latency_measured": "float",
        "packetloss_required": "float",
        "packetloss_measured": "float",
        "availability_required": "float",
        "availability_measured": "float",
        "paths": "list[str]",
        "status": "str",
        "complete": "bool",
    }

    attribute_map = {
        "id": "id",
        "name": "name",
        "ingress_port": "ingress_port",
        "egress_port": "egress_port",
        "quantity": "quantity",
        "start_time": "start_time",
        "end_time": "end_time",
        "multi_path": "multi_path",
        "preempt": "preempt",
        "backup_path_type": "backup_path_type",
        "exclusive_links": "exclusive_links",
        "inclusive_links": "inclusive_links",
        "bandwidth_required": "bandwidth_required",
        "bandwidth_measured": "bandwidth_measured",
        "latency_required": "latency_required",
        "latency_measured": "latency_measured",
        "packetloss_required": "packetloss_required",
        "packetloss_measured": "packetloss_measured",
        "availability_required": "availability_required",
        "availability_measured": "availability_measured",
        "paths": "paths",
        "status": "status",
        "complete": "complete",
    }

    def __init__(
        self,
        id=None,
        name=None,
        ingress_port=None,
        egress_port=None,
        quantity=None,
        start_time=None,
        end_time=None,
        multi_path=None,
        preempt=None,
        backup_path_type=None,
        exclusive_links=None,
        inclusive_links=None,
        bandwidth_required=None,
        bandwidth_measured=None,
        latency_required=None,
        latency_measured=None,
        packetloss_required=None,
        packetloss_measured=None,
        availability_required=None,
        availability_measured=None,
        paths=None,
        status=None,
        complete=False,
    ):  # noqa: E501
        """Connection - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._ingress_port = None
        self._egress_port = None
        self._quantity = None
        self._start_time = None
        self._end_time = None
        self._multi_path = None
        self._preempt = None
        self._backup_path_type = None
        self._exclusive_links = None
        self._inclusive_links = None
        self._bandwidth_required = None
        self._bandwidth_measured = None
        self._latency_required = None
        self._latency_measured = None
        self._packetloss_required = None
        self._packetloss_measured = None
        self._availability_required = None
        self._availability_measured = None
        self._paths = None
        self._status = None
        self._complete = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.ingress_port = ingress_port
        self.egress_port = egress_port
        if quantity is not None:
            self.quantity = quantity
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if multi_path is not None:
            self.multi_path = multi_path
        if preempt is not None:
            self.preempt = preempt
        if backup_path_type is not None:
            self.backup_path_type = backup_path_type
        if exclusive_links is not None:
            self.exclusive_links = exclusive_links
        if inclusive_links is not None:
            self.inclusive_links = inclusive_links
        if bandwidth_required is not None:
            self.bandwidth_required = bandwidth_required
        if bandwidth_measured is not None:
            self.bandwidth_measured = bandwidth_measured
        if latency_required is not None:
            self.latency_required = latency_required
        if latency_measured is not None:
            self.latency_measured = latency_measured
        if packetloss_required is not None:
            self.packetloss_required = packetloss_required
        if packetloss_measured is not None:
            self.packetloss_measured = packetloss_measured
        if availability_required is not None:
            self.availability_required = availability_required
        if availability_measured is not None:
            self.availability_measured = availability_measured
        if paths is not None:
            self.paths = paths
        if status is not None:
            self.status = status
        if complete is not None:
            self.complete = complete

    @property
    def id(self):
        """Gets the id of this Connection.  # noqa: E501


        :return: The id of this Connection.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Connection.


        :param id: The id of this Connection.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Connection.  # noqa: E501


        :return: The name of this Connection.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Connection.


        :param name: The name of this Connection.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501

        self._name = name

    @property
    def ingress_port(self):
        """Gets the ingress_port of this Connection.  # noqa: E501


        :return: The ingress_port of this Connection.  # noqa: E501
        :rtype: Port
        """
        return self._ingress_port

    @ingress_port.setter
    def ingress_port(self, ingress_port):
        """Sets the ingress_port of this Connection.


        :param ingress_port: The ingress_port of this Connection.  # noqa: E501
        :type: Port
        """
        if ingress_port is None:
            raise ValueError(
                "Invalid value for `ingress_port`, must not be `None`"
            )  # noqa: E501

        self._ingress_port = ingress_port

    @property
    def egress_port(self):
        """Gets the egress_port of this Connection.  # noqa: E501


        :return: The egress_port of this Connection.  # noqa: E501
        :rtype: Port
        """
        return self._egress_port

    @egress_port.setter
    def egress_port(self, egress_port):
        """Sets the egress_port of this Connection.


        :param egress_port: The egress_port of this Connection.  # noqa: E501
        :type: Port
        """
        if egress_port is None:
            raise ValueError(
                "Invalid value for `egress_port`, must not be `None`"
            )  # noqa: E501

        self._egress_port = egress_port

    @property
    def quantity(self):
        """Gets the quantity of this Connection.  # noqa: E501


        :return: The quantity of this Connection.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Connection.


        :param quantity: The quantity of this Connection.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def start_time(self):
        """Gets the start_time of this Connection.  # noqa: E501


        :return: The start_time of this Connection.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Connection.


        :param start_time: The start_time of this Connection.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this Connection.  # noqa: E501


        :return: The end_time of this Connection.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Connection.


        :param end_time: The end_time of this Connection.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def multi_path(self):
        """Gets the multi_path of this Connection.  # noqa: E501


        :return: The multi_path of this Connection.  # noqa: E501
        :rtype: bool
        """
        return self._multi_path

    @multi_path.setter
    def multi_path(self, multi_path):
        """Sets the multi_path of this Connection.


        :param multi_path: The multi_path of this Connection.  # noqa: E501
        :type: bool
        """

        self._multi_path = multi_path

    @property
    def preempt(self):
        """Gets the preempt of this Connection.  # noqa: E501


        :return: The preempt of this Connection.  # noqa: E501
        :rtype: bool
        """
        return self._preempt

    @preempt.setter
    def preempt(self, preempt):
        """Sets the preempt of this Connection.


        :param preempt: The preempt of this Connection.  # noqa: E501
        :type: bool
        """

        self._preempt = preempt

    @property
    def backup_path_type(self):
        """Gets the backup_path_type of this Connection.  # noqa: E501


        :return: The backup_path_type of this Connection.  # noqa: E501
        :rtype: str
        """
        return self._backup_path_type

    @backup_path_type.setter
    def backup_path_type(self, backup_path_type):
        """Sets the backup_path_type of this Connection.


        :param backup_path_type: The backup_path_type of this Connection.  # noqa: E501
        :type: str
        """
        allowed_values = ["0", "1", "2", "3"]  # noqa: E501
        if backup_path_type not in allowed_values:
            raise ValueError(
                "Invalid value for `backup_path_type` ({0}), must be one of {1}".format(  # noqa: E501
                    backup_path_type, allowed_values
                )
            )

        self._backup_path_type = backup_path_type

    @property
    def exclusive_links(self):
        """Gets the exclusive_links of this Connection.  # noqa: E501


        :return: The exclusive_links of this Connection.  # noqa: E501
        :rtype: list[Link]
        """
        return self._exclusive_links

    @exclusive_links.setter
    def exclusive_links(self, exclusive_links):
        """Sets the exclusive_links of this Connection.


        :param exclusive_links: The exclusive_links of this Connection.  # noqa: E501
        :type: list[Link]
        """

        self._exclusive_links = exclusive_links

    @property
    def inclusive_links(self):
        """Gets the inclusive_links of this Connection.  # noqa: E501


        :return: The inclusive_links of this Connection.  # noqa: E501
        :rtype: list[Link]
        """
        return self._inclusive_links

    @inclusive_links.setter
    def inclusive_links(self, inclusive_links):
        """Sets the inclusive_links of this Connection.


        :param inclusive_links: The inclusive_links of this Connection.  # noqa: E501
        :type: list[Link]
        """

        self._inclusive_links = inclusive_links

    @property
    def bandwidth_required(self):
        """Gets the bandwidth_required of this Connection.  # noqa: E501


        :return: The bandwidth_required of this Connection.  # noqa: E501
        :rtype: float
        """
        return self._bandwidth_required

    @bandwidth_required.setter
    def bandwidth_required(self, bandwidth_required):
        """Sets the bandwidth_required of this Connection.


        :param bandwidth_required: The bandwidth_required of this Connection.  # noqa: E501
        :type: float
        """

        self._bandwidth_required = bandwidth_required

    @property
    def bandwidth_measured(self):
        """Gets the bandwidth_measured of this Connection.  # noqa: E501


        :return: The bandwidth_measured of this Connection.  # noqa: E501
        :rtype: float
        """
        return self._bandwidth_measured

    @bandwidth_measured.setter
    def bandwidth_measured(self, bandwidth_measured):
        """Sets the bandwidth_measured of this Connection.


        :param bandwidth_measured: The bandwidth_measured of this Connection.  # noqa: E501
        :type: float
        """

        self._bandwidth_measured = bandwidth_measured

    @property
    def latency_required(self):
        """Gets the latency_required of this Connection.  # noqa: E501


        :return: The latency_required of this Connection.  # noqa: E501
        :rtype: float
        """
        return self._latency_required

    @latency_required.setter
    def latency_required(self, latency_required):
        """Sets the latency_required of this Connection.


        :param latency_required: The latency_required of this Connection.  # noqa: E501
        :type: float
        """

        self._latency_required = latency_required

    @property
    def latency_measured(self):
        """Gets the latency_measured of this Connection.  # noqa: E501


        :return: The latency_measured of this Connection.  # noqa: E501
        :rtype: float
        """
        return self._latency_measured

    @latency_measured.setter
    def latency_measured(self, latency_measured):
        """Sets the latency_measured of this Connection.


        :param latency_measured: The latency_measured of this Connection.  # noqa: E501
        :type: float
        """

        self._latency_measured = latency_measured

    @property
    def packetloss_required(self):
        """Gets the packetloss_required of this Connection.  # noqa: E501


        :return: The packetloss_required of this Connection.  # noqa: E501
        :rtype: float
        """
        return self._packetloss_required

    @packetloss_required.setter
    def packetloss_required(self, packetloss_required):
        """Sets the packetloss_required of this Connection.


        :param packetloss_required: The packetloss_required of this Connection.  # noqa: E501
        :type: float
        """

        self._packetloss_required = packetloss_required

    @property
    def packetloss_measured(self):
        """Gets the packetloss_measured of this Connection.  # noqa: E501


        :return: The packetloss_measured of this Connection.  # noqa: E501
        :rtype: float
        """
        return self._packetloss_measured

    @packetloss_measured.setter
    def packetloss_measured(self, packetloss_measured):
        """Sets the packetloss_measured of this Connection.


        :param packetloss_measured: The packetloss_measured of this Connection.  # noqa: E501
        :type: float
        """

        self._packetloss_measured = packetloss_measured

    @property
    def availability_required(self):
        """Gets the availability_required of this Connection.  # noqa: E501


        :return: The availability_required of this Connection.  # noqa: E501
        :rtype: float
        """
        return self._availability_required

    @availability_required.setter
    def availability_required(self, availability_required):
        """Sets the availability_required of this Connection.


        :param availability_required: The availability_required of this Connection.  # noqa: E501
        :type: float
        """

        self._availability_required = availability_required

    @property
    def availability_measured(self):
        """Gets the availability_measured of this Connection.  # noqa: E501


        :return: The availability_measured of this Connection.  # noqa: E501
        :rtype: float
        """
        return self._availability_measured

    @availability_measured.setter
    def availability_measured(self, availability_measured):
        """Sets the availability_measured of this Connection.


        :param availability_measured: The availability_measured of this Connection.  # noqa: E501
        :type: float
        """

        self._availability_measured = availability_measured

    @property
    def paths(self):
        """Gets the paths of this Connection.  # noqa: E501


        :return: The paths of this Connection.  # noqa: E501
        :rtype: list[str]
        """
        return self._paths

    @paths.setter
    def paths(self, paths):
        """Sets the paths of this Connection.


        :param paths: The paths of this Connection.  # noqa: E501
        :type: list[str]
        """

        self._paths = paths

    @property
    def status(self):
        """Gets the status of this Connection.  # noqa: E501

        Connection Status  # noqa: E501

        :return: The status of this Connection.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Connection.

        Connection Status  # noqa: E501

        :param status: The status of this Connection.  # noqa: E501
        :type: str
        """
        allowed_values = ["success", "fail", "scheduled", "provisioining"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}".format(  # noqa: E501
                    status, allowed_values
                )
            )

        self._status = status

    @property
    def complete(self):
        """Gets the complete of this Connection.  # noqa: E501


        :return: The complete of this Connection.  # noqa: E501
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete):
        """Sets the complete of this Connection.


        :param complete: The complete of this Connection.  # noqa: E501
        :type: bool
        """

        self._complete = complete

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (
                            (item[0], item[1].to_dict())
                            if hasattr(item[1], "to_dict")
                            else item
                        ),
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(Connection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Connection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
